# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require File.expand_path('../config/application', __FILE__)

Pornofolio::Application.load_tasks


namespace :unicorn do

  desc "Start unicorn"
  task(:start) {
    unicorn_conf = "#{rails_root}/config/unicorn/release.rb"
    env = ENV['RAILS_ENV']
    if env.blank?
      puts 'env is blank.'
    else
      sh "bundle exec unicorn_rails -D -c #{unicorn_conf} -E #{env}"
    end
  }

  desc "Stop unicorn"
  task(:stop) { unicorn_signal :QUIT }

  desc "Restart unicorn with USR2"
  task(:restart) { unicorn_signal :USR2 }

  desc "Increment number of worker processes"
  task(:increment) { unicorn_signal :TTIN }

  desc "Decrement number of worker processes"
  task(:decrement) { unicorn_signal :TTOU }

  desc "Unicorn pstree (depends on pstree command)"
  task(:pstree) do
    sh "pstree '#{unicorn_pid}'"
  end

  ##
  # Helpers

  def unicorn_signal signal
    Process.kill signal, unicorn_pid
  end

  def unicorn_pid
    begin
      File.read("#{rails_root}/tmp/pids/unicorn.pid").to_i
    rescue Errno::ENOENT
      raise "Unicorn doesn't seem to be running"
    end
  end

  def rails_root
    File.expand_path("../", __FILE__)
  end

end

namespace :sidekiq do
  desc "Start sidekiq"
  task(:stop) {
    sh "bundle exec sidekiqctl stop #{sidekiq_pid}"
  }

  desc "Start sidekiq"
  task :start do
    env = ENV['RAILS_ENV'] || 'development'
    if env.blank?
      puts 'env is blank.'
    else
      sidekiq_conf = "#{rails_root}/config/sidekiq.yml"
      sh "bundle exec sidekiq -d -e #{env} -C #{sidekiq_conf} -P #{sidekiq_pid}"
    end
  end


  def sidekiq_pid
    "#{rails_root}/tmp/pids/sidekiq.pid"
  end

  def rails_root
    File.expand_path("../", __FILE__)
  end
end